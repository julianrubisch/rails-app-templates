gem 'pg', '>= 0.18', '< 2.0'

# because bootstrap
gem 'jquery-rails'

#
gem 'webpacker', '~> 3.5'

gem 'responders'

# Slim is a template language whose goal is reduce the syntax to the essential parts without becoming cryptic.
gem 'slim-rails'

# A library for generating fake data such as names, addresses, and phone numbers.
gem 'faker'

# A library for setting up Ruby objects as test data.
gem 'factory_bot_rails', '~> 4.0'

gem 'sidekiq'

# active record and helpers
gem 'acts_as_list'

# authentication
gem 'devise'
gem 'omniauth'

# authorization
gem 'pundit'

# external APIs
gem 'httparty'


# german stuff
gem 'rails-i18n', '~> 5.1'
gem 'i18n-date'

# fontawesome sass
gem 'font-awesome-sass', '~> 5.3.1'


# forms
gem 'simple_form'
gem 'simplemde-rails'

# markdown
gem 'kramdown'

# notify don't tell - state machine
gem 'aasm'

# pagination
gem 'kaminari'

# s3
gem 'aws-sdk-s3', require: false

# pdf
gem 'prawn-rails'


# active storage
gem 'image_processing', '~> 1.2'
gem 'mini_magick'

add_source 'https://rails-assets.org' do
  gem 'rails-assets-bootstrap', '~> 4.1.0'
  gem 'rails-assets-bootstrap-datepicker'
  gem 'rails-assets-dropzone'
  gem 'rails-assets-font-awesome'
end

gem_group :development, :test do
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]

  gem 'capybara-webkit'

  gem 'rspec-rails', '~> 3.6'

  gem 'spring'

  gem 'rubocop'

  gem 'pronto'
  gem 'pronto-flay'
  gem 'pronto-reek'
  gem 'pronto-rubocop'

  gem 'pry'

  gem 'binding_of_caller'
end

gem_group :test do
  gem 'rspec-activemodel-mocks'

  # instafailing RSpec formatter that uses a progress bar
  gem 'fuubar'

  # Collection of testing matchers extracted from Shoulda
  gem 'shoulda-matchers'

  gem 'rails-controller-testing'

  gem 'mutant-rspec'
end

gem_group :development do
  # Access an interactive console on exception pages or by calling 'console' anywhere in the code.
  gem 'web-console', '>= 3.3.0'
  gem 'listen', '>= 3.0.5', '< 3.2'
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'spring-watcher-listen', '~> 2.0.0'

  # Annotate ALLTHETHINGS after migrations
  gem 'annotate'

  gem 'better_errors'
end

file '.nvmrc', <<-CODE
lts/carbon
CODE

file '.gitlab-ci.yml', <<-CODE
image: jrubisch/ci-images:rails-gitlab-chrome-2.4.2

services:
  - postgres:latest

variables:
  POSTGRES_DB: #{@app_name}_test
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/ruby

before_script:
  # ruby / rails
  - ruby -v
  - which ruby
  - gem install bundler --no-ri --no-rdoc
  - RAILS_ENV=test bundle install --jobs $(nproc) --path vendor "${FLAGS[@]}"
  - bin/yarn install
  - cp config/database.yml.gitlab config/database.yml
  - RAILS_ENV=test bundle exec rake db:create db:schema:load

rspec:
  script:
    - RAILS_ENV=test xvfb-run -a bundle exec rspec

rubocop:
  script:
    - bundle exec pronto run -c=origin/develop --exit-code
CODE

remove_file '.gitignore'

file '.gitignore', <<-CODE
# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

# Ignore uploaded files in development
/storage/*

/node_modules
/yarn-error.log

/public/assets
.byebug_history

# Ignore master key for decrypting credentials and more.
/config/master.key
.idea/**

/public/packs
/public/packs-test
/node_modules
yarn-debug.log*
.yarn-integrity

/coverage
.vscode/**
CODE

inside 'config' do
  remove_file 'database.yml'
  file 'database.yml', <<-CODE
# PostgreSQL. Versions 9.1 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On OS X with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On OS X with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  database: #{@app_name}_development

  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user that initialized the database.
  #username: #{@app_name}

  # The password associated with the postgres role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: #{@app_name}_test

# As with config/secrets.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
production:
  <<: *default
  database: #{@app_name}_production
  username: #{@app_name}
  password: <%= ENV['#{@app_name.upcase}_DATABASE_PASSWORD'] %>

CODE

  file 'database.yml.gitlab', <<-CODE
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

test:
  adapter: postgresql
  encoding: unicode
  pool: 5
  timeout: 5000
  host: postgres
  username: runner
  password: ""
  database: #{@app_name}_test
CODE
end

file '.flayignore', <<-CODE
db/*
db/migrate/*
app/helpers/submissions_helper.rb
app/controllers/people_controller.rb
spec/features/*
spec/controllers/*
spec/policies/*
CODE

file '.rubocop.yml', <<-CODE
AllCops:
  Exclude:
    - 'db/*'
    - 'db/migrate/*'
Metrics/BlockLength:
  Exclude:
    - 'spec/features/*'
Metrics/LineLength:
  Max: 120
Style/Documentation:
  Enabled: False
Style/FrozenStringLiteralComment:
  Enabled: False
Style/AsciiComments:
  Enabled: False
CODE

file '.ruby-gemset', <<-CODE
#{@app_name}
CODE

remove_dir 'test'

environment 'config.active_job.queue_adapter = :sidekiq'
environment 'config.webpacker.check_yarn_integrity = false', env: 'development'
environment 'config.webpacker.check_yarn_integrity = false', env: 'production'
environment 'config.action_mailer.default_url_options = { host: \'localhost:3000\' }', env: 'development'
environment 'config.assets.js_compressor = Uglifier.new(harmony: true)', env: 'production'

after_bundle do
  run 'rbenv local 2.5.1'
  run 'bundle exec rails webpacker:install'
  run 'bundle exec rails webpacker:install:stimulus'
  run 'bin/yarn add activestorage moment'

  rails_command 'db:drop'
  rails_command 'db:create'

  run 'spring stop'

  generate 'responders:install'

  generate 'simple_form:install'
  generate 'simple_form:install', '--bootstrap'

  generate 'devise:install'
  generate 'devise', 'User'
  generate 'devise:views'

  generate 'pundit:install'

  generate 'kaminari:config'
  generate 'kaminari:views', 'bootstrap4'

  generate 'rspec:install'
  run 'bundle binstubs bundler'
  run 'bundle binstubs rspec-core'
  run 'bundle exec spring binstub --all'

  generate 'annotate:install'

  git add: "."
  git commit: %Q{ -m 'Initial commit' }

  # rails_command 'db:migrate'

  # devise setup: https://github.com/plataformatec/devise/

  # Some setup you must do manually if you haven't yet:

  # 1. Ensure you have defined default url options in your environments files. Here
  #     is an example of default_url_options appropriate for a development environment
  #     in config/environments/development.rb:

  #       config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

  #     In production, :host should be set to the actual host of your application.

  # 2. Ensure you have defined root_url to *something* in your config/routes.rb.
  #     For example:

  #       root to: "home#index"

  # 3. Ensure you have flash messages in app/views/layouts/application.html.erb.
  #     For example:

  #       <p class="notice"><%= notice %></p>
  #       <p class="alert"><%= alert %></p>

  # 4. You can copy Devise views (for customization) to your app by running:

  #       rails g devise:views

  # factory bot setup: https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md#configure-your-test-suite
  # pundit setup: https://github.com/varvet/pundit
end
